generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  GUEST
  STUDENT
  WORKER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  role          UserRole  @default(GUEST)
  points        Int       @default(0)

  activities      Activity[]      @relation("CreatedBy")
  participations  Participation[] @relation("ParticipationUser")

  @@map("users")
}

model Activity {
  id            String    @id @default(cuid()) 
  name          String
  description   String
  file          String?
  defaultPoints Int
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime  @default(now())
  isDeleted     Boolean   @default(false)

  creatorId     String
  Creator       User      @relation("CreatedBy", fields: [creatorId], references: [id])
  instituteId   Int
  Institute     Institute @relation("ActivityInstitute", fields: [instituteId], references: [id])
  categoryId    Int
  Category      Category  @relation("ActivityCategory", fields: [categoryId], references: [id])

  participations  Participation[] @relation("ParticipationActivity")

  @@map("activities")
}

model Institute {
  id            Int         @id @default(autoincrement()) 
  name          String
  activities    Activity[]  @relation("ActivityInstitute")

  @@map("institutes")
}

model Category {
  id            Int         @id @default(autoincrement()) 
  name          String
  activities    Activity[]  @relation("ActivityCategory")

  @@map("categories")
}

enum ParticipationStatus {
  APPLIED
  ACCEPTED
  REJECTED
}

model Participation {
  id          String    @id @default(cuid())
  status      ParticipationStatus
  points      Int
  isCancelled Boolean 

  studentId   String
  Student     User      @relation("ParticipationUser", fields: [studentId], references: [id])
  activityId  String
  Activity    Activity  @relation("ParticipationActivity", fields: [activityId], references: [id])

  @@map("participations")
}